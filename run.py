import os
import subprocess
import create_submission
import improved_solution
from tqdm import tqdm

def run_solution_for_dataset(dataset):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    solution_file = f"solutions/solution_{dataset}.csv"
    input_dir = os.path.join("data", dataset)
    
    print(f"\n{'='*60}")
    print(f"üîç –ü–†–û–í–ï–†–ö–ê –†–ï–®–ï–ù–ò–Ø –î–õ–Ø –ù–ê–ë–û–†–ê –î–ê–ù–ù–´–•: {dataset}")
    print(f"{'='*60}")
    
    if not os.path.exists(input_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    if not os.path.exists(solution_file):
        print(f"‚ùå –§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è {solution_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    cmd = [
        'python', 'validator.py',
        '-i', input_dir,
        '-s', solution_file
    ]
    
    print("  üß™ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞...")
    result = subprocess.run(cmd, capture_output=True, text=True)
    print(result.stdout)
    if result.stderr:
        print("‚ùå –û—à–∏–±–∫–∏:", result.stderr)
        return False
    
    return True

def main():
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    os.makedirs("solutions", exist_ok=True)
    
    print("üöö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–∑–æ–∫")
    print("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("\nüìÅ –ù–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö: 10, 20, 50, 140")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
    datasets = ['10', '20', '50', '140']
    available_datasets = []
    
    print("\nüîé –ü–æ–∏—Å–∫ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    for dataset in tqdm(datasets, desc="–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö"):
        data_path = os.path.join("data", dataset)
        if os.path.exists(data_path):
            available_datasets.append(dataset)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    print("\nüìã –ù–∞–π–¥–µ–Ω—ã –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    for dataset in datasets:
        if dataset in available_datasets:
            print(f"  ‚úÖ {dataset}")
        else:
            print(f"  ‚ùå {dataset}")
    
    if not available_datasets:
        print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–µ 'data' –µ—Å—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏: 10, 20, 50, 140")
        return
    
    input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω–∞–±–æ—Ä–æ–≤
    print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π...")
    improved_solution.process_all_datasets()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º...")
    validation_results = {}
    
    for dataset in tqdm(available_datasets, desc="–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π"):
        validation_results[dataset] = run_solution_for_dataset(dataset)
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
    create_submission.main()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("‚úÖ –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´!")
    print("="*60)
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for dataset in available_datasets:
        status = "‚úÖ –£–°–ü–ï–•" if validation_results.get(dataset, False) else "‚ùå –û–®–ò–ë–ö–ò"
        print(f"  –ù–∞–±–æ—Ä {dataset}: {status}")
    
    print("\nüì§ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –í –°–ò–°–¢–ï–ú–£:")
    print("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –û–î–ò–ù –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö ZIP-—Ñ–∞–π–ª–æ–≤:")
    for dataset in available_datasets:
        zip_file = f"solutions/solution_{dataset}.zip"
        if os.path.exists(zip_file):
            print(f"  ‚úÖ solutions/solution_{dataset}.zip")
    
    print("\nüí° –°–û–í–ï–¢: –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ –Ω–∞–±–æ—Ä–∞ (10), –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ larger")

if __name__ == "__main__":
    main()